Subject: [PATCH] MIS-307 Yahoo User Agent
MIS-307 Yahoo User Agent
---
Index: src/com/moneydance/modules/features/securityquoteload/GetQuotesProgressMonitor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/GetQuotesProgressMonitor.java b/src/com/moneydance/modules/features/securityquoteload/GetQuotesProgressMonitor.java
--- a/src/com/moneydance/modules/features/securityquoteload/GetQuotesProgressMonitor.java	(revision 70e07121b36a02433e2b6b078164fdfc098ade3e)
+++ b/src/com/moneydance/modules/features/securityquoteload/GetQuotesProgressMonitor.java	(revision a5ff193b1ec7e6fbae14c0cb9ed116ecf94e555a)
@@ -128,6 +128,40 @@
 		}
 		updateProgress();
 	}
+	public synchronized void failed(String ticker,String uuid, String errorCode){
+		debugInst.debug("GetQuotesProgressMonitor","failed",MRBDebug.SUMMARY,"> FAILED stock=" + ticker+" error "+errorCode);
+		/*
+		 * Only increment once if failed, there can be several messages
+		 */
+		if (ticker.startsWith(Constants.CURRENCYID)) {
+			cur = currencyTab.get(ticker);
+			if (cur.getTickerStatus() == Constants.TASKSTARTED){
+				debugInst.debug("GetQuotesProgressMonitor","Completed Count Incremented",MRBDebug.SUMMARY,"> FAILED currency=" + ticker);
+				completedTasks.getAndIncrement();
+				cur.setTickerStatus( Constants.TASKFAILED);
+				if (uuidStatus.containsKey(uuid.toString())) {
+					TaskCounts counts = uuidStatus.get(uuid.toString());
+					counts.incFailed();
+				}
+				failedCount++;
+			}
+		}
+		else {
+			acct = accountsTab.get(ticker);
+			if (acct.getTickerStatus() == Constants.TASKSTARTED){
+				debugInst.debug("GetQuotesProgressMonitor","Completed Count Incremented",MRBDebug.SUMMARY,"> FAILED stock=" + ticker);
+				completedTasks.getAndIncrement();
+				acct.setTickerStatus( Constants.TASKFAILED);
+				if (uuidStatus.containsKey(uuid.toString())) {
+					TaskCounts counts = uuidStatus.get(uuid.toString());
+					counts.incFailed();
+				}
+				failedCount++;
+			}
+		}
+		updateProgress();
+	}
+
 
 	public synchronized void ended(String ticker,String uuid) {
 		if (ticker.startsWith(Constants.CURRENCYID)) {
Index: src/com/moneydance/modules/features/securityquoteload/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/Main.java b/src/com/moneydance/modules/features/securityquoteload/Main.java
--- a/src/com/moneydance/modules/features/securityquoteload/Main.java	(revision 70e07121b36a02433e2b6b078164fdfc098ade3e)
+++ b/src/com/moneydance/modules/features/securityquoteload/Main.java	(revision a5ff193b1ec7e6fbae14c0cb9ed116ecf94e555a)
@@ -568,6 +568,14 @@
             autoRunNeeded = false;
         }
     }
+    public void setThrottleMessage(){
+        if (frame != null)
+            frame.setThrottleMessage();
+    }
+    public void unsetThrottleMessage(){
+        if (frame != null)
+            frame.unsetThrottleMessage();
+    }
 
     /**
      * Process Command Argument
Index: src/com/moneydance/modules/features/securityquoteload/MainPriceWindow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/MainPriceWindow.java b/src/com/moneydance/modules/features/securityquoteload/MainPriceWindow.java
--- a/src/com/moneydance/modules/features/securityquoteload/MainPriceWindow.java	(revision 70e07121b36a02433e2b6b078164fdfc098ade3e)
+++ b/src/com/moneydance/modules/features/securityquoteload/MainPriceWindow.java	(revision a5ff193b1ec7e6fbae14c0cb9ed116ecf94e555a)
@@ -52,10 +52,7 @@
 import java.util.*;
 import java.util.List;
 import java.util.Map.Entry;
-
 import javax.swing.*;
-
-
 import com.moneydance.modules.features.securityquoteload.quotes.QuoteException;
 import com.moneydance.modules.features.securityquoteload.view.*;
 import org.apache.http.NameValuePair;
@@ -143,6 +140,7 @@
 	protected ParameterTab parameterScreen = null;
 	private String selectedTab;
 	private boolean selectAllReturned = true;
+	private JLabel throttleMessage;
 
 	public MainPriceWindow(Main main, int runtype) {
 		Main.debugInst.debug("MainPriceWindow", "MainPriceWindow", MRBDebug.DETAILED,
@@ -271,6 +269,10 @@
 		buttonsPanel = new JPanel(new GridBagLayout());
 		gridX = 0;
 		gridY = 0;
+		throttleMessage = new JLabel("Yahoo Throttling Active. Call speed reduced");
+		throttleMessage.setForeground(Color.RED);
+		buttonsPanel.add(throttleMessage, GridC.getc(gridX++, gridY).insets(10, 10, 10, 10));
+		unsetThrottleMessage();
 		statusMessage = new JLabel("Quote Loader Autorun delayed. It will start when you close Quote Loader");
 		statusMessage.setForeground(Color.RED);
 		buttonsPanel.add(statusMessage, GridC.getc(gridX++, gridY).insets(10, 10, 10, 10));
@@ -461,13 +463,25 @@
 		this.pack();
 	}
 	public void setStatusMessage(){
-		statusMessage.setVisible(true);
+		if (statusMessage != null)
+			statusMessage.setVisible(true);
 		this.revalidate();
 	}
 	public void unsetStatusMessage(){
-		statusMessage.setVisible(false);
+		if (statusMessage != null)
+			statusMessage.setVisible(false);
 		this.revalidate();
 	}
+	public void setThrottleMessage(){
+		if (throttleMessage != null)
+			throttleMessage.setVisible(true);
+		this.revalidate();
+	}
+	public void unsetThrottleMessage(){
+		if (throttleMessage != null)
+			throttleMessage.setVisible(false);
+		this.revalidate();
+	}
 	private void setButtons(int selectedIndex) {
 		switch (selectedIndex) {
 		case 0:
@@ -2078,6 +2092,7 @@
 		}
 		List<NameValuePair> results = URLEncodedUtils.parse(uri, charSet);
 		String ticker = "";
+		String errorCode="";
 		boolean currencyFound = false;
 		QuoteSource srce=null;
 		for (NameValuePair price : results) {
@@ -2173,7 +2188,7 @@
 		if (errorTickers != null)
 			errorTickers.add(ticker);
 		if (listener != null)
-			listener.failed(ticker, uuid);
+			listener.failed(ticker, uuid, errorCode);
 	}
 
 	public synchronized void doneQuote(String url) {
@@ -2184,10 +2199,12 @@
 		/*
 		 * if completed set, ignore message
 		 */
+		unsetThrottleMessage();
 		if (completed) {
 			Main.debugInst.debug("MainPriceWindow", "doneQuote", MRBDebug.INFO, "Late message");
 			return;
 		}
+		unsetThrottleMessage();
 		String uuid = "";
 		URI uri;
 		try {
@@ -2282,7 +2299,8 @@
 					mess += ", prices missing for extended Tickers";
 				if (currencyError)
 					mess += ", extended ticker has different currency";
-				JOptionPane.showMessageDialog(null, mess, "Get Completed", JOptionPane.INFORMATION_MESSAGE);
+				final String message = mess;
+				SwingUtilities.invokeLater(new Runnable() { public void run() { JOptionPane.showMessageDialog(null, message, "Get Completed", JOptionPane.INFORMATION_MESSAGE); } });
 				tasksProgress.setVisible(false);
 				buttonsPanel.remove(tasksProgress);
 				if (tabs.getSelectedIndex() == 0) {
Index: src/com/moneydance/modules/features/securityquoteload/NewParameters.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/NewParameters.java b/src/com/moneydance/modules/features/securityquoteload/NewParameters.java
--- a/src/com/moneydance/modules/features/securityquoteload/NewParameters.java	(revision 70e07121b36a02433e2b6b078164fdfc098ade3e)
+++ b/src/com/moneydance/modules/features/securityquoteload/NewParameters.java	(revision a5ff193b1ec7e6fbae14c0cb9ed116ecf94e555a)
@@ -48,6 +48,7 @@
 	private Integer amtHistory;
 	private String exportFolder;
 	private String alphaAPIKey;
+	private String uaParam;
 	private List<NewAccountLine> listAccounts;
 
 	public  NewParameters(){
@@ -61,6 +62,7 @@
 		displayOption = 0;
 		amtHistory=0;
 		alphaAPIKey="";
+		uaParam = "";
 		listAccounts = new ArrayList<>();
 	}
 	/**
@@ -111,7 +113,12 @@
 	public String getAlphaAPIKey() {
 		return alphaAPIKey;
 	}
-
+	/**
+	 * @return User Agent Param
+	 */
+	public String getUaParam() {
+		return uaParam;
+	}
 	/**
 	 * @return the listAccounts
 	 */
@@ -199,4 +206,7 @@
 	public void setAlphaAPIKey(String alphaAPIKey) {
 		this.alphaAPIKey = alphaAPIKey;
 	}
+	public void setUaParam(String uaParam) {
+		this.uaParam = uaParam;
+	}
 }
Index: src/com/moneydance/modules/features/securityquoteload/Parameters.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/Parameters.java b/src/com/moneydance/modules/features/securityquoteload/Parameters.java
--- a/src/com/moneydance/modules/features/securityquoteload/Parameters.java	(revision 70e07121b36a02433e2b6b078164fdfc098ade3e)
+++ b/src/com/moneydance/modules/features/securityquoteload/Parameters.java	(revision a5ff193b1ec7e6fbae14c0cb9ed116ecf94e555a)
@@ -86,6 +86,7 @@
 	private  Integer amtHistory;
 	private  Integer timeOfRun;
 	private String alphaAPIKey;
+	private String uaParam;
 	private  char[] HEX_CHARS = "0123456789abcdef".toCharArray();
 
 	private int noDecimals;
@@ -232,6 +233,7 @@
 		this.amtHistory= newParams.getAmtHistory();
 		this.displayOption=newParams.getDisplayOption();
 		this.alphaAPIKey = newParams.getAlphaAPIKey();
+		this.uaParam = newParams.getUaParam();
 
 		savedAccounts = new TreeMap<>();
 		buildAccounts();
@@ -472,6 +474,19 @@
 		this.alphaAPIKey = alphaAPIKey;
 		isDirty=true;
 	}
+	/*
+	 * User Agent
+	 */
+
+	public String getUaParam() {
+		return uaParam;
+	}
+
+	public void setUaParam(String uaParam) {
+		this.uaParam = uaParam;
+		isDirty=true;
+	}
+
 
 	/*
 	 * Accounts
@@ -591,6 +606,7 @@
 		newParams.setDisplayOption(displayOption);
 		newParams.setListAccounts(listNewAccounts);
 		newParams.setAlphaAPIKey(alphaAPIKey);
+		newParams.setUaParam(uaParam);
 
 		/*
 		 * create the file
@@ -624,6 +640,7 @@
 		this.overridePrice = newParams.isOverridePrice();
 		this.amtHistory= newParams.getAmtHistory();
 		this.alphaAPIKey= newParams.getAlphaAPIKey();
+		this.uaParam= newParams.getUaParam();
 		this.displayOption=newParams.getDisplayOption();
 		isDirty=false;
 	}
Index: src/com/moneydance/modules/features/securityquoteload/meta_info.dict
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/meta_info.dict b/src/com/moneydance/modules/features/securityquoteload/meta_info.dict
--- a/src/com/moneydance/modules/features/securityquoteload/meta_info.dict	(revision 70e07121b36a02433e2b6b078164fdfc098ade3e)
+++ b/src/com/moneydance/modules/features/securityquoteload/meta_info.dict	(revision 00c6374718580244bb0a2f65214d88b03a3fb879)
@@ -1,6 +1,6 @@
 {
   "vendor" = "Mike Bray"
-  "module_build" = "321705"
+  "module_build" = "322001"
   "minbuild" = "4045"
   "vendor.url" = "https://github.com/mrbray99/moneydanceproduction/wiki/New-Quote-Loader"
   "module_name" = "Quote Loader"
Index: src/com/moneydance/modules/features/securityquoteload/quotes/GetQuoteTask.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/quotes/GetQuoteTask.java b/src/com/moneydance/modules/features/securityquoteload/quotes/GetQuoteTask.java
--- a/src/com/moneydance/modules/features/securityquoteload/quotes/GetQuoteTask.java	(revision 70e07121b36a02433e2b6b078164fdfc098ade3e)
+++ b/src/com/moneydance/modules/features/securityquoteload/quotes/GetQuoteTask.java	(revision 00c6374718580244bb0a2f65214d88b03a3fb879)
@@ -53,9 +53,16 @@
 
 public class GetQuoteTask extends QuoteTask<QuotePrice> {
 	Parameters params;
+	boolean throttleRequired;
 	public GetQuoteTask (String ticker, QuoteListener listener, CloseableHttpClient httpClient,String tickerType,String tid) {
 		super(ticker,listener, httpClient,tickerType,tid);
 		params=Parameters.getParameters();
+		throttleRequired=false;
+	}
+	public GetQuoteTask (String ticker, QuoteListener listener, CloseableHttpClient httpClient,String tickerType,String tid,boolean throttleRequired) {
+		super(ticker,listener, httpClient,tickerType,tid);
+		params=Parameters.getParameters();
+		this.throttleRequired = throttleRequired;
 	}
 	@Override
 	public QuotePrice call() throws Exception {
@@ -63,20 +70,27 @@
 		CloseableHttpResponse response = null;
 		if (ticker.isBlank()) {
 			debugInst.debug("GetQuoteTask", "call", MRBDebug.INFO, "Invalid Ticker "+rawTicker);
-			sendError();		
+			sendError();
 		}
 			
 		URI uri=null;
+		String userAgent;
 		try {
 			uri= new URI(url.trim());
 			debugInst.debug("GetQuoteTask", "call", MRBDebug.INFO, "Processing  "+ticker+" URI:"+uri.toASCIIString());
+			if (throttleRequired)
+				TimeUnit.SECONDS.sleep(2);
 			HttpGet httpGet = new HttpGet(uri);
 			httpGet.addHeader("Accept-Language","en");
-			httpGet.addHeader("User-Agent","Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36");
+			if (params.getUaParam().isEmpty())
+				userAgent = UserAgent.getAgent();
+			else
+				userAgent =params.getUaParam();
+			httpGet.addHeader("User-Agent",userAgent);
 			response = httpClient.execute(httpGet);
 			quotePrice=null; 
 			debugInst.debug("GetQuoteTask", "call", MRBDebug.DETAILED, "Return stats for  "+ticker+" "+response.getStatusLine().getStatusCode() );
-			if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
+			if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK || response.getStatusLine().getStatusCode()==203) {
 				try {
 					quotePrice = analyseResponse(response);
 					String doneUrl ="moneydance:fmodule:" + Constants.PROGRAMNAME + ":"+Constants.LOADPRICECMD+"?"+Constants.TIDCMD+"="+tid+"&";
@@ -122,6 +136,8 @@
 			}
 			else {
 				debugInst.debug("GetQuoteTask", "call", MRBDebug.INFO, "error returned "+response.getStatusLine().getStatusCode());
+				if (response.getStatusLine().getStatusCode()==429)
+					debugInst.debug("GetQuoteTask", "call", MRBDebug.INFO, "quote rejected - user agent ="+userAgent);
 				sendError();
 			}
 		} catch (URISyntaxException e) {
@@ -130,7 +146,7 @@
 		}
 			catch (ClientProtocolException e2) {
 				debugInst.debug("GetQuoteTask", "call", MRBDebug.INFO, "server returned protocol error for "+ticker);
-				sendError();					
+				sendError();
 			}
 		catch (Exception e3) {
 			debugInst.debug("getQuoteTask", "call", MRBDebug.INFO, "General Error  - "+e3.getMessage());
Index: src/com/moneydance/modules/features/securityquoteload/quotes/GetYahooQuote.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/quotes/GetYahooQuote.java b/src/com/moneydance/modules/features/securityquoteload/quotes/GetYahooQuote.java
--- a/src/com/moneydance/modules/features/securityquoteload/quotes/GetYahooQuote.java	(revision 70e07121b36a02433e2b6b078164fdfc098ade3e)
+++ b/src/com/moneydance/modules/features/securityquoteload/quotes/GetYahooQuote.java	(revision a5ff193b1ec7e6fbae14c0cb9ed116ecf94e555a)
@@ -75,8 +75,8 @@
     private List<String> highs;
     Integer lastPriceDate;
 
-    public GetYahooQuote(String ticker, QuoteListener listener, CloseableHttpClient httpClient, String tickerType, String tid) {
-        super(ticker, listener, httpClient, tickerType, tid);
+    public GetYahooQuote(String ticker, QuoteListener listener, CloseableHttpClient httpClient, String tickerType, String tid, boolean throttleRequired) {
+        super(ticker, listener, httpClient, tickerType, tid, throttleRequired);
         String convTicker = ticker.replace("^", "%5E");
         if (tickerType == Constants.STOCKTYPE)
             url = yahooSecURL + convTicker + "?p=" + convTicker + "&.tscr=fin-srch";
@@ -84,8 +84,8 @@
             url = yahooCurrURL + convTicker + "?p=" + convTicker;
         debugInst.debug("GetYahooQuote", "GetYahooQuote", MRBDebug.DETAILED, "Executing :" + url);
     }
-    public GetYahooQuote(String ticker, QuoteListener listener, CloseableHttpClient httpClient, String tickerType, String tid,Integer lastPriceDate,boolean history) {
-        super(ticker, listener, httpClient, tickerType, tid);
+    public GetYahooQuote(String ticker, QuoteListener listener, CloseableHttpClient httpClient, String tickerType, String tid,Integer lastPriceDate,boolean history, boolean throttleRequired) {
+        super(ticker, listener, httpClient, tickerType, tid, throttleRequired);
         this.history = history;
         int  historyDateInt = DateUtil.incrementDate(Main.today,0,-(params.getAmtHistory()+1),0);
         this.lastPriceDate = (lastPriceDate == null ? 0 : lastPriceDate);
@@ -128,9 +128,7 @@
             throw (new IOException(e));
         } catch (Exception e) {
             e.printStackTrace();
-
         }
-
         return quotePrice;
     }
 
Index: src/com/moneydance/modules/features/securityquoteload/quotes/QuoteManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/quotes/QuoteManager.java b/src/com/moneydance/modules/features/securityquoteload/quotes/QuoteManager.java
--- a/src/com/moneydance/modules/features/securityquoteload/quotes/QuoteManager.java	(revision 70e07121b36a02433e2b6b078164fdfc098ade3e)
+++ b/src/com/moneydance/modules/features/securityquoteload/quotes/QuoteManager.java	(revision a5ff193b1ec7e6fbae14c0cb9ed116ecf94e555a)
@@ -73,6 +73,7 @@
     private int totalQuotes = 0;
     private int successful = 0;
     private int failed = 0;
+    private boolean throttleRequired;
 
     public void getQuotes(String request) {
         stocks = new ArrayList<String>();
@@ -235,30 +236,32 @@
             }
             case Constants.SOURCEYAHOO -> {
                 Long timeout;
-                if ((stocks.size() + currencies.size()) > 59) {
-                    timeout = (stocks.size() + currencies.size()) * 10l;
-                } else {
-                    if ((stocks.size() + currencies.size()) < 100)
+                timeout = (stocks.size() + currencies.size()) * 20l;
+                throttleRequired = true;
+                Main.extension.setThrottleMessage();
+                if ((stocks.size() + currencies.size()) < 100)
                         timeout = 180L;
                     else if ((stocks.size() + currencies.size()) > 99 && (stocks.size() + currencies.size()) < 200)
                         timeout = 360L;
                     else
                         timeout = 480L;
-                }
                 for (String stock : stocks) {
-                    GetQuoteTask task = new GetYahooQuote(stock, this, httpClient, Constants.STOCKTYPE, tid);
+                    GetQuoteTask task = new GetYahooQuote(stock, this, httpClient, Constants.STOCKTYPE, tid, throttleRequired);
                     tasks.add(task);
                     totalQuotes++;
                 }
                 for (String currency : currencies) {
-                    GetQuoteTask task = new GetYahooQuote(currency, this, httpClient, Constants.CURRENCYTYPE, tid);
+                    GetQuoteTask task = new GetYahooQuote(currency, this, httpClient, Constants.CURRENCYTYPE, tid, throttleRequired);
                     tasks.add(task);
                     totalQuotes++;
                 }
                 List<Future<QuotePrice>> futures = null;
 
                 try {
-                    threadPool = Executors.newFixedThreadPool(4);
+                    if (throttleRequired)
+                        threadPool = Executors.newFixedThreadPool(1);
+                    else
+                        threadPool = Executors.newFixedThreadPool(4);
                     debugInst.debug("QuoteManager", "getQuotes", MRBDebug.SUMMARY, "Yahoo Tasks invoking " + tasks.size() + " queries");
                     futures = threadPool.invokeAll(tasks, timeout, TimeUnit.SECONDS);
                 } catch (InterruptedException e) {
@@ -292,29 +295,31 @@
             }
             case Constants.SOURCEYAHOOHIST -> {
                 Long timeout;
-                if ((stocks.size() + currencies.size()) > 59) {
-                    timeout = (stocks.size() + currencies.size()) * 10l;
-                } else {
-                    if ((stocks.size() + currencies.size()) < 100)
-                        timeout = 180L;
-                    else if ((stocks.size() + currencies.size()) > 99 && (stocks.size() + currencies.size()) < 200)
-                        timeout = 360L;
-                    else
-                        timeout = 480L;
-                }
+                timeout = (stocks.size() + currencies.size()) * 10l;
+                throttleRequired = true;
+                Main.extension.setThrottleMessage();
+                if ((stocks.size() + currencies.size()) < 100)
+                    timeout = 180L;
+                else if ((stocks.size() + currencies.size()) > 99 && (stocks.size() + currencies.size()) < 200)
+                    timeout = 360L;
+                else
+                    timeout = 480L;
                 for (String stock : stocks) {
-                    GetQuoteTask task = new GetYahooQuote(stock, this, httpClient, Constants.STOCKTYPE, tid, lastPriceDate.get(stock), true);
+                    GetQuoteTask task = new GetYahooQuote(stock, this, httpClient, Constants.STOCKTYPE, tid, lastPriceDate.get(stock), true, throttleRequired);
                     tasks.add(task);
                     totalQuotes++;
                 }
                 for (String currency : currencies) {
-                    GetQuoteTask task = new GetYahooQuote(currency, this, httpClient, Constants.CURRENCYTYPE, tid, lastPriceDate.get(currency),true);
+                    GetQuoteTask task = new GetYahooQuote(currency, this, httpClient, Constants.CURRENCYTYPE, tid, lastPriceDate.get(currency),true, throttleRequired);
                     tasks.add(task);
                     totalQuotes++;
                 }
                 List<Future<QuotePrice>> futures = null;
                 try {
-                    threadPool = Executors.newFixedThreadPool(4);
+                    if (throttleRequired)
+                        threadPool = Executors.newFixedThreadPool(1);
+                    else
+                        threadPool = Executors.newFixedThreadPool(4);
                     debugInst.debug("QuoteManager", "getQuotes", MRBDebug.SUMMARY, "Yahoo History Tasks invoking " + tasks.size() + " queries");
                     futures = threadPool.invokeAll(tasks, timeout, TimeUnit.SECONDS);
                 } catch (InterruptedException e) {
Index: src/com/moneydance/modules/features/securityquoteload/quotes/UserAgent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/quotes/UserAgent.java b/src/com/moneydance/modules/features/securityquoteload/quotes/UserAgent.java
new file mode 100644
--- /dev/null	(revision a5ff193b1ec7e6fbae14c0cb9ed116ecf94e555a)
+++ b/src/com/moneydance/modules/features/securityquoteload/quotes/UserAgent.java	(revision a5ff193b1ec7e6fbae14c0cb9ed116ecf94e555a)
@@ -0,0 +1,115 @@
+package com.moneydance.modules.features.securityquoteload.quotes;
+import java.util.Random;
+
+public class UserAgent {
+    final static String agents[] = {
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.91 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.6312.122 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.6261.111 Safari/537.36",
+    "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_6_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.91 Safari/537.36",
+    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.91 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0",
+    "Mozilla/5.0 (Macintosh; Intel Mac OS X 13.6; rv:123.0) Gecko/20100101 Firefox/123.0",
+    "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:123.0) Gecko/20100101 Firefox/123.0",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.91 Safari/537.36 Edg/124.0.2478.51",
+    "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_6_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.91 Safari/537.36 Edg/124.0.2478.51",
+    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.91 Safari/537.36 Edg/124.0.2478.51",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.91 Safari/537.36 OPR/110.0.5130.67",
+    "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_6_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.6367.91 Safari/537.36 OPR/110.0.5130.67",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/142.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/143.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/144.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/145.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/146.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/147.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/148.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/149.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/150.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/151.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/152.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/153.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/154.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/155.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/156.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/157.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/158.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/159.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/160.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/161.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/162.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/163.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/164.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/165.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/166.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/167.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/168.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/169.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/170.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/171.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/172.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/173.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/174.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/175.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/176.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/177.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/178.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/179.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/180.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/181.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/182.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/183.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/184.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/185.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/186.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/187.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/188.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/189.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/190.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/191.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/192.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/193.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/194.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/195.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/196.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/197.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/198.0.0.0 Safari/537.36",
+    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/199.0.0.0 Safari/537.36"};
+    public static String getAgent(){
+        double randomNum = Math.random();
+        Double index = randomNum * agents.length;
+        if (index<0.0)
+            index = 0.0;
+        if (index>(agents.length-1))
+            index = agents.length-1.0;
+        return agents[index.intValue()];
+    }
+}
Index: src/com/moneydance/modules/features/securityquoteload/view/CurrencyTableLine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/view/CurrencyTableLine.java b/src/com/moneydance/modules/features/securityquoteload/view/CurrencyTableLine.java
--- a/src/com/moneydance/modules/features/securityquoteload/view/CurrencyTableLine.java	(revision 70e07121b36a02433e2b6b078164fdfc098ade3e)
+++ b/src/com/moneydance/modules/features/securityquoteload/view/CurrencyTableLine.java	(revision a5ff193b1ec7e6fbae14c0cb9ed116ecf94e555a)
@@ -47,6 +47,7 @@
 	private Double percentChg=0.0;
 	private Double amtChg=0.0;
 	private Integer tradeDate=0;
+	private Integer errorCode;
 	private List<HistoryPrice> history=null;
 	/*
 	 * working fields
Index: src/com/moneydance/modules/features/securityquoteload/view/ParameterTab.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/moneydance/modules/features/securityquoteload/view/ParameterTab.java b/src/com/moneydance/modules/features/securityquoteload/view/ParameterTab.java
--- a/src/com/moneydance/modules/features/securityquoteload/view/ParameterTab.java	(revision 70e07121b36a02433e2b6b078164fdfc098ade3e)
+++ b/src/com/moneydance/modules/features/securityquoteload/view/ParameterTab.java	(revision a5ff193b1ec7e6fbae14c0cb9ed116ecf94e555a)
@@ -96,6 +96,8 @@
 	private Boolean saveAutoChange;
 	private JLabel alphaLbl;
 	private JTextField alphaKey;
+	private JLabel uaLabel;
+	private JTextField uaParam;
 
 	public ParameterTab(Parameters params, Main main, MainPriceWindow controller) {
 		super(params, main, controller);
@@ -747,8 +749,23 @@
 			public void changedUpdate(DocumentEvent e) {params.setAlphaAPIKey(alphaKey.getText());}
 		});
 		alphaKey.setPreferredSize(new Dimension(150,20));
-		mainPanel.add(alphaLbl, GridC.getc(gridx++, gridy).insets(5,5,5,5));
-		mainPanel.add(alphaKey, GridC.getc(gridx, gridy++).insets(5,5,5,5));
+		mainPanel.add(alphaLbl, GridC.getc(gridx++, gridy).insets(5,5,5,5).west());
+		mainPanel.add(alphaKey, GridC.getc(gridx, gridy++).insets(5,5,5,5).west());
+		gridx=1;
+		uaLabel = new JLabel("User Agent");
+		uaParam = new JTextField();
+		uaParam.setText(params.getUaParam());
+		uaParam.setPreferredSize(new Dimension(400,20));
+		uaParam.getDocument().addDocumentListener(new DocumentListener(){
+			@Override
+			public void insertUpdate(DocumentEvent e) {params.setUaParam(uaParam.getText());}
+			@Override
+			public void removeUpdate(DocumentEvent e) {params.setUaParam(uaParam.getText());}
+			@Override
+			public void changedUpdate(DocumentEvent e) {params.setUaParam(uaParam.getText());}
+		});
+		mainPanel.add(uaLabel, GridC.getc(gridx++, gridy).insets(5,5,5,5).west());
+		mainPanel.add(uaParam, GridC.getc(gridx, gridy++).insets(5,5,5,5).colspan(4).west());
 		gridx=1;
 		saveParams = new JButton("Save Parameters");
 		saveParams.setToolTipText("Click to save parameters");
